*senpai* Senpai is super reliable!

==============================================================================
Table of Contents                                  *senpai-table-of-contents*
  Setup.........................................................|senpai-setup|
  Config.......................................................|senpai-config|
  Chat...........................................................|senpai-chat|
  Commands...................................................|senpai-commands|

------------------------------------------------------------------------------
                                                                  *senpai-setup*

------------------------------------------------------------------------------
                                                                *senpai.setup()*
                             `senpai.setup`({opts})
Parameters ~
{opts} `(optional)` `(senpai.Config)` see |senpai-config|


==============================================================================
------------------------------------------------------------------------------
Class ~
{senpai.Config.providers.Provider}
Fields ~
{model} `(string)`

------------------------------------------------------------------------------
                                        *senpai-config-providers-openaiprovider*
Class ~
{senpai.Config.providers.OpenAIProvider}
Fields ~
{model} `("gpt-4o" | "gpt-4o-mini")`

------------------------------------------------------------------------------
                                     *senpai-config-providers-anthropicprovider*
Class ~
{senpai.Config.providers.AnthropicProvider}
Fields ~
{model} `("claude-3-7-sonnet-20250219" | "claude-3-5-sonnet-20241022")`

------------------------------------------------------------------------------
                                    *senpai-config-providers-openrouterprovider*
Class ~
{senpai.Config.providers.OpenRouterProvider}
Fields ~
{model} `(string)`
  You can get a list of models with the following command.
  >sh
  curl https://openrouter.ai/api/v1/models | jq '.data[].id'
  # check specific model
  curl https://openrouter.ai/api/v1/models | \
    jq '.data[] | select(.id == "deepseek/deepseek-r1:free") | .'
<
------------------------------------------------------------------------------
                                                                 *senpai-config*
Class ~
{senpai.Config}
Fields ~
{provider} `(optional)` "`(openai)`" | "openrouter"
{providers} `(optional)` `(table<string, senpai.Config.providers.Provider>)`
  see |senpai-config-providers|
{commit_message} `(optional)` `(senpai.Config.commit_message)`
  see |senpai-config-commit-message|

Default values:
>lua
  {
    commit_message = {
      language = "English"
    },
    provider = "openai",
    providers = {
      anthropic = {
        model = "claude-3-7-sonnet-20250219"
      },
      openai = {
        model = "gpt-4o"
      },
      openrouter = {
        model = "anthropic/claude-3.7-sonnet"
      }
    }
  }
<
------------------------------------------------------------------------------
                                                  *senpai-config-commit-message*
Class ~
{senpai.Config.commit_message}
Fields ~
{language} `(string|(fun(): string))` Supports languages that AI knows
  It doesn't have to be strictly natural language,
  since the prompt is as follows
  >typescript
   `subject and body should be written in ${language}.`
<
  That means the AI can write it in a tsundere style as well.
  Like this.
    `:Senpai commitMessage English(Tsundere)`

------------------------------------------------------------------------------
                                               *M.get_commit_message_language()*
                       `M.get_commit_message_language`()
Return ~
`(string)`

------------------------------------------------------------------------------
                                                              *M.get_provider()*
                               `M.get_provider`()
Return ~
"`(openai)`" | "openrouter"
Return ~
`(senpai.Config.providers.Provider)`


==============================================================================
------------------------------------------------------------------------------
                                                                   *senpai-chat*
                                    `Config`

You can chat with AI.
If you write the file name, it will automatically read it.
If you write `foo/bar/buz.txt` as `summarize buz.txt`,
it will be recognized.
  (internally it searches `**/buz.txt` for files under git control).

------------------------------------------------------------------------------
                                                                             *M*
                                      `M`
Class ~
{senpai.ChatBuffer}
Fields ~
{provider} `(provider)`
{provider_config} `(senpai.Config.providers.Provider)`
{system_prompt} `(string)`
{thread_id} `(string)`
{chat_log} `(NuiSplit|nil)`
{chat_input} `(NuiSplit|nil)`
{hidden} `(boolean)`

------------------------------------------------------------------------------
Class ~
{senpai.ChatBufferNewArgs}
Fields ~
{provider} `(optional)` "`(openai)`" | "openrouter"
{provider_config} `(optional)` `(senpai.Config.providers.Provider)`
{system_prompt} `(optional)` `(string)`
{thread_id} `(optional)` `(string)`

------------------------------------------------------------------------------
                                                                       *M.new()*
                                `M.new`({args})
Parameters ~
{args} `(senpai.ChatBufferNewArgs)`
Return ~
`(senpai.ChatBuffer)`


==============================================================================
------------------------------------------------------------------------------
                                                            *senpai-toggle-chat*
                               `M.toggle_chat`()

open chat


==============================================================================
------------------------------------------------------------------------------
                                                *senpai-generate-commit-message*
                    `M.generate_commit_message`({language})
Parameters ~
{language} `(optional)` `(string)`
Return ~
`(string)`

------------------------------------------------------------------------------
                                                   *senpai-write-commit-message*
                      `M.write_commit_message`({language})

AI write conventional commit message of commitizen convention format.
Parameters ~
{language} `(optional)` `(string)`
Return ~
`(nil)`


==============================================================================
------------------------------------------------------------------------------
                                                               *senpai-commands*

Commands ~
`:Senpai {subcommand}`

`:Senpai commitMessage (language)`
  detail -> |senpai-write-commit-message|

`:Senpai toggleChat`
  detail -> |senpai-toggle-chat|


 vim:tw=78:ts=8:noet:ft=help:norl: