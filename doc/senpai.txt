*senpai.txt*            For NVIM v0.10.0            Last change: 2025 April 01

==============================================================================
Table of Contents                                   *senpai-table-of-contents*

1. senpai.nvim                                            |senpai-senpai.nvim|
2. Feature                                                    |senpai-feature|
  - Chat                                                 |senpai-feature-chat|
  - History                                           |senpai-feature-history|
  - RAG                                                   |senpai-feature-rag|
  - Prompt Launcher                           |senpai-feature-prompt-launcher|
3. Requirements                                          |senpai-requirements|
  - Provider                                    |senpai-requirements-provider|
4. Installation                                          |senpai-installation|
5. config                                                      |senpai-config|
  - default config                              |senpai-config-default-config|
  - changing the chat keymap          |senpai-config-changing-the-chat-keymap|
  - generate commit message            |senpai-config-generate-commit-message|
6. API                                                            |senpai-api|
  - delete_rag_source                           |senpai-api-delete_rag_source|
  - delete_thread                                   |senpai-api-delete_thread|
  - generate_commit_message               |senpai-api-generate_commit_message|
  - load_thread                                       |senpai-api-load_thread|
  - new_thread                                         |senpai-api-new_thread|
  - prompt_launcher                               |senpai-api-prompt_launcher|
  - regist_url_at_rag                           |senpai-api-regist_url_at_rag|
  - setup                                                   |senpai-api-setup|
  - toggle_chat                                       |senpai-api-toggle_chat|
  - write_commit_message                     |senpai-api-write_commit_message|
7. Commands                                                  |senpai-commands|
  - _hello                                            |senpai-commands-_hello|
  - _helloStream                                |senpai-commands-_hellostream|
  - commitMessage                              |senpai-commands-commitmessage|
  - deleteRagSource                          |senpai-commands-deleteragsource|
  - loadThread                                    |senpai-commands-loadthread|
  - newThread                                      |senpai-commands-newthread|
  - promptLauncher                            |senpai-commands-promptlauncher|
  - toggleChat                                    |senpai-commands-togglechat|
8. Type                                                          |senpai-type|
9. Acknowledgements                                  |senpai-acknowledgements|

==============================================================================
1. senpai.nvim                                            *senpai-senpai.nvim*

Senpai is super reliable Neovim AI plugin!


==============================================================================
2. Feature                                                    *senpai-feature*

- Chat
- History: You can continue the conversation
- RAG
- Generate commit message

Powered by Mastra <https://mastra.ai/> and Vercel AI SDK
<https://sdk.vercel.ai/>.


CHAT                                                     *senpai-feature-chat*

You can chat with AI.


CHAT HELP ~

**You can open keymap help with ?**.

By default, send to AI with `<CR>`.


READ FILE ~

If you write the file name, it will automatically read it. If you write
`foo/bar/buz.txt` as `summarize buz.txt`, it will be recognized. (internally it
searches `**/buz.txt` for files under git control).

Right now it’s automatic, but eventually I’m going to make it controllable.


REPLACE FILE ~

You can also edit the file.



In the area called `Replace File`, press `a` to display the diff. This diff
uses Neovim’s built-in function `diffthis`, so you can apply the diff with
`do` or `dp`.

Related help `:help copy-diffs`.


SYSTEM PROMPT ~

If you want to write a system prompt, you can configure it as follows.

>lua
    require("senpai").setup({
        chat = {
            system_prompt = "Answers should be in Japanese."
        }
    })
<

To see the system prompt, type `gs` in the chat log area (Key is customizable).


HISTORY                                               *senpai-feature-history*

Select a past thread and load it again as a chat. **You can continue the
conversation**. The selection UI supports the following methods.

- Native (vim.ui.select)
- snacks.nvim <https://github.com/folke/snacks.nvim> picker




DELETE THREAD FROM HISTORY ~

In case of snacks, switch to normal mode and enter `dd` to delete the specified
thread. You can also delete using the API `senpai.delete_thread(thread_id)`.


RAG                                                       *senpai-feature-rag*

RAG(Retrieval-Augmented Generation) is avaiable.

Supported types:

- URL

URL can be registered with RAG in two ways.

- default keymap `gR` in Chat input area (Key is customizable)
- API `senpai.regist_url_at_rag`

Unnecessary items can be deleted.



Cache control can be configured in |`senpai.Config.rag.cache_strategy`|.


PROMPT LAUNCHER                               *senpai-feature-prompt-launcher*

You can chat with customized prompts.

>lua
    require("senpai").setup({
      prompt_launchers = {
        ["Tsundere"] = {
          system = "Answers should be tsundere style.",
          priority = 100,
        },
        ["test message"] = {
          user = "test message. Hello!",
        },
      },
    }) 
<

Command `:Senpai promptLauncher` opens the selection UI. The chosen one opens
as a chat.


==============================================================================
3. Requirements                                          *senpai-requirements*

- Neovim
- curl
- Bun <https://bun.sh/>
    - Forgive me if the dependence is frustrating for you, but it’s easy to install.
- Dependent Plugins
    - nui.nvim <https://github.com/MunifTanjim/nui.nvim>
    - plenary.nvim <https://github.com/nvim-lua/plenary.nvim>
    - nvim-treesitter <https://github.com/nvim-treesitter/nvim-treesitter>


PROVIDER                                        *senpai-requirements-provider*

Currently supported providers are as follows.

  name         Environment variable for API token
  ------------ ------------------------------------
  openai       OPENAI_API_KEY
  openrouter   OPENROUTER_API_KEY
The default provider is written in `providers.default`.

>lua
    require("senpai").setup({
      providers = {
        default = "openrouter",
      },
    })
<

The model specifications should be written in the `model_id` of each provider.

>lua
    require("senpai").setup({
      providers = {
        default = "openrouter",
        openrouter = { model_id = "openai/chatgpt-4o-latest" },
      },
    })
<

You can find how to write `model_id` in the following links (most of them are
in the Vercel AI SDK documentation).

- OpenAI <https://sdk.vercel.ai/providers/ai-sdk-providers/openai#model-capabilities>
- …
- OpenRouter <https://openrouter.ai/models>


==============================================================================
4. Installation                                          *senpai-installation*

with Lazy.nvim <https://github.com/folke/lazy.nvim>

>lua
    {
        "eetann/senpai.nvim", 
        build = "bun install",
        dependencies = {
          "MunifTanjim/nui.nvim",
          "nvim-lua/plenary.nvim",
          "nvim-treesitter/nvim-treesitter",
        },
        opts = {config}
    }
<

with packer.nvim <https://github.com/wbthomason/packer.nvim>

>lua
    {
        "eetann/senpai.nvim", 
        run = "bun install",
        requires = {
          "MunifTanjim/nui.nvim",
          "nvim-lua/plenary.nvim",
          "nvim-treesitter/nvim-treesitter",
        },
        opt = true,
        config = function()
            require("senpai").setup({config}) 
        end
    }
<

**Example of lazy.nvim lazy loading** It is useful to set `:Senpai toggleChat`!

>lua
    {
        "eetann/senpai.nvim", 
        keys = {
            { "<space>ss", "<Cmd>Senpai toggleChat<CR>" },
        },
        cmd = { "Senpai" },
        opts = {config}
    }
<


==============================================================================
5. config                                                      *senpai-config*


DEFAULT CONFIG                                  *senpai-config-default-config*

The default config are as follows.

>lua
    {
      chat = {
        common = {
          keymaps = {
            ["<C-c>"] = "abort",
            ["?"] = "help",
            gi = "toggle_input",
            gl = "load_thread",
            gx = "new_thread",
            q = "close"
          }
        },
        input_area = {
          keymaps = {
            ["<CR>"] = "submit",
            gR = "regist_url_at_rag"
          }
        },
        log_area = {
          keymaps = {
            a = "apply",
            gs = "show_system_prompt"
          }
        }
      },
      commit_message = {
        language = "English"
      },
      prompt_launchers = {
        Senpai = {
          priority = 99,
          system = "Answer as a senpai with a crazy casual tone."
        },
        Tsundere = {
          priority = 100,
          system = "Answers should be tsundere style."
        }
      },
      providers = {
        anthropic = {
          model_id = "claude-3-7-sonnet-20250219"
        },
        default = "openrouter",
        openai = {
          model_id = "gpt-4o"
        },
        openrouter = {
          model_id = "anthropic/claude-3.7-sonnet"
        }
      },
      rag = {
        cache_strategy = "ask"
      }
    }
<


CHANGING THE CHAT KEYMAP              *senpai-config-changing-the-chat-keymap*

Assign `false` if you want to delete the keymap.

>lua
    require("senpai").setup({
        chat = {
            input_area = {
                keymaps = {
                    ["<CR>"] = false,
                    ["<CR><CR>"] = "submit",
                },
            },
        },
    })
<


GENERATE COMMIT MESSAGE                *senpai-config-generate-commit-message*

Here’s a code of my setup in `.config/nvim/after/ftplugin/gitcommit.lua`.

>lua
    vim.keymap.set("n", "<C-g><C-g>", function()
        if vim.env.COMMIT_MESSAGE_ENGLISH == "1" then
            vim.cmd("Senpai commitMessage English")
        else
            vim.cmd("Senpai commitMessage Japanese")
        end
    end, { buffer = true, desc = "Senpai commitMessage" })
<

If this doesn’t work, then git diff is most likely failing.


==============================================================================
6. API                                                            *senpai-api*


DELETE_RAG_SOURCE                               *senpai-api-delete_rag_source*

>lua
    senpai.delete_rag_source()
    senpai.delete_rag_source(source)
<

detail -> |senpai-feature-rag|

  Name     Type      Description
  -------- --------- ----------------------------------------
  source   string?   If not specified, the finder will open
 


DELETE_THREAD                                       *senpai-api-delete_thread*

>lua
    senpai.delete_thread(thread_id)
<

Delete the specified thread.

  Name        Type     Description
  ----------- -------- -------------
  thread_id   string   thread_id
 


GENERATE_COMMIT_MESSAGE                   *senpai-api-generate_commit_message*

>lua
    senpai.generate_commit_message(language)
<

AI generate conventional commit message of commitizen convention format.

  ---------------------------------------------------------------------------------------
  Name              Type                             Description
  ----------------- -------------------------------- ------------------------------------
  language          string                           Language of commit message

  callback          senpai.RequestHandler.callback   Function to be processed using the
                                                     response
  ---------------------------------------------------------------------------------------
 


LOAD_THREAD                                           *senpai-api-load_thread*

>lua
    senpai.load_thread()
    senpai.load_thread(thread)
<

detail -> |senpai-feature-history|

  Name        Type      Description
  ----------- --------- ----------------------------------------
  thread_id   string?   If not specified, the finder will open
 


NEW_THREAD                                             *senpai-api-new_thread*

>lua
    senpai.new_thread()
<

Open new chat.

_No arguments_  


PROMPT_LAUNCHER                                   *senpai-api-prompt_launcher*

>lua
    senpai.prompt_launcher()
<

Select and launch the prompt_launcher set in |senpai.Config.prompt_launchers|.

_No arguments_  


REGIST_URL_AT_RAG                               *senpai-api-regist_url_at_rag*

>lua
    senpai.regist_url_at_rag()
    senpai.regist_url_at_rag(url)
<

Fetch URL and save to RAG. Cache control can be configured in
|senpai.Config.rag.cache_strategy|.

  ------------------------------------------------------------------------
  Name              Type              Description
  ----------------- ----------------- ------------------------------------
  url               string|nil        URL. If not specified, the input UI
                                      will open

  no_cache          boolean|nil       If set to true, no cache is used
                                      regardless of Config.
  ------------------------------------------------------------------------
 


SETUP                                                       *senpai-api-setup*

>lua
    senpai.setup({...})
<

Setup senpai

  Name     Type              Description
  -------- ----------------- --------------
  config   |senpai.Config|   Setup senpai
 


TOGGLE_CHAT                                           *senpai-api-toggle_chat*

>lua
    senpai.toggle_chat()
<

Toggle chat.

_No arguments_  


WRITE_COMMIT_MESSAGE                         *senpai-api-write_commit_message*

>lua
    senpai.write_commit_message(language)
<

AI write conventional commit message of commitizen convention format.

  Name       Type     Description
  ---------- -------- ----------------------------
  language   string   Language of commit message
 


==============================================================================
7. Commands                                                  *senpai-commands*

`:Senpai {subcommand}`


_HELLO                                                *senpai-commands-_hello*

>
    :Senapi _hello
<

For developers. To check communication with internal servers.

_No arguments_  


_HELLOSTREAM                                    *senpai-commands-_hellostream*

>
    :Senapi _helloStream
<

For developers. To check that streams are received correctly from the internal
server.

_No arguments_  


COMMITMESSAGE                                  *senpai-commands-commitmessage*

>
    :Senapi commitMessage
<

detail -> |senpai-api-write_commit_message|

  Name       Description
  ---------- -------------
  language   language
 


DELETERAGSOURCE                              *senpai-commands-deleteragsource*

>
    :Senapi deleteRagSource
<

detail -> |senpai-feature-rag|

_No arguments_  


LOADTHREAD                                        *senpai-commands-loadthread*

>
    :Senapi loadThread
<

detail -> |senpai-feature-history|

_No arguments_  


NEWTHREAD                                          *senpai-commands-newthread*

>
    :Senapi newThread
<

detail -> |senpai-api-new_thread|

_No arguments_  


PROMPTLAUNCHER                                *senpai-commands-promptlauncher*

>
    :Senapi promptLauncher
<

detail -> |senpai-api-prompt-launcher|

_No arguments_  


TOGGLECHAT                                        *senpai-commands-togglechat*

>
    :Senapi toggleChat
<

detail -> |senpai-feature-chat|

_No arguments_  


==============================================================================
8. Type                                                          *senpai-type*

`*senpai.Config*`

>lua
    ---@class senpai.Config
    ---@field providers? senpai.Config.providers
    ---@field commit_message? senpai.Config.commit_message
    ---@field chat? senpai.Config.chat
    ---@field rag? senpai.Config.rag
    ---@field prompt_launchers? senpai.Config.prompt_launchers
<

`*senpai.Config.chat*`

>lua
    ---@class senpai.Config.chat
    ---@field common? senpai.Config.chat.common
    ---@field log_area? senpai.Config.chat.log_area
    ---@field input_area? senpai.Config.chat.input_area
    ---@field system_prompt? string
<

`*senpai.Config.chat.common*`

>lua
    ---@class senpai.Config.chat.common
    ---@field keymaps? senpai.Config.chat.keymaps
<

`*senpai.Config.chat.input_area*`

>lua
    ---@class senpai.Config.chat.input_area
    ---@field keymaps? senpai.Config.chat.keymaps
<

`*senpai.Config.chat.keymap*`

>lua
    ---@class senpai.Config.chat.keymap
    ---@field [1]? string|fun(self: senpai.IChatWindow):nil
    ---@field key? string
    ---@field mode? string|string[]
    ---@field desc string
<

`*senpai.Config.chat.log_area*`

>lua
    ---@class senpai.Config.chat.log_area
    ---@field keymaps? senpai.Config.chat.keymaps
<

`*senpai.Config.commit_message*`

>lua
    ---@class senpai.Config.commit_message
    ---@field language string|(fun(): string) Supports languages that AI knows
    ---   It doesn't have to be strictly natural language,
    ---   since the prompt is as follows
    ---    `subject and body should be written in ${language}.`
    ---   That means the AI can write it in a tsundere style as well.
    ---   Like this.
    ---     `:Senpai commitMessage English(Tsundere)`
<

`*senpai.Config.provider.anthropic*`

>lua
    ---@class senpai.Config.provider.anthropic: senpai.Config.provider.base
    ---@field model_id ("claude-3-7-sonnet-20250219" | "claude-3-5-sonnet-20241022"|string)
<

`*senpai.Config.provider.base*`

>lua
    ---@class senpai.Config.provider.base
    ---@field model_id string
<

`*senpai.Config.provider.openai*`

>lua
    ---@class senpai.Config.provider.openai: senpai.Config.provider.base
    ---@field model_id ("gpt-4o" | "gpt-4o-mini"|string)
<

`*senpai.Config.provider.openrouter*`

>lua
    ---@class senpai.Config.provider.openrouter: senpai.Config.provider.base
    ---@field model_id string
    ---   You can get a list of models with the following command.
    ---   >sh
    ---   curl https://openrouter.ai/api/v1/models | jq '.data[].id'
    ---   # check specific model
    ---   curl https://openrouter.ai/api/v1/models | \
    ---     jq '.data[] | select(.id == "deepseek/deepseek-r1:free") | .'
    --- <
<

`*senpai.Config.rag*`

>lua
    ---@class senpai.Config.rag
    ---@field cache_strategy? senpai.Config.rag.cache_strategy
<


==============================================================================
9. Acknowledgements                                  *senpai-acknowledgements*

This plugin was inspired by the following.

- codecompanion.nvim <https://github.com/olimorris/codecompanion.nvim>Default keymaps and Implementation of diff display
- avante.nvim <https://github.com/yetone/avante.nvim>Use of winbar and virt text in chat windows
- nvim-deck <https://github.com/hrsh7th/nvim-deck>Scripts for creating README and Help
- cline <https://github.com/cline/cline>How to prompt and edit files

Thanks to all those involved in these!

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
