*senpai.txt*            For NVIM v0.10.0            Last change: 2025 March 14

==============================================================================
Table of Contents                                   *senpai-table-of-contents*

1. senpai.nvim                                            |senpai-senpai.nvim|
  - Feature                                       |senpai-senpai.nvim-feature|
  - API                                               |senpai-senpai.nvim-api|
  - Commands                                     |senpai-senpai.nvim-commands|
  - Type                                             |senpai-senpai.nvim-type|

==============================================================================
1. senpai.nvim                                            *senpai-senpai.nvim*

Senpai is super reliable Neovim AI plugin!


FEATURE                                           *senpai-senpai.nvim-feature*


CHAT ~

You can chat with AI. If you write the file name, it will automatically read
it. If you write `foo/bar/buz.txt` as `summarize buz.txt`, it will be
recognized. (internally it searches `**/buz.txt` for files under git control).


DEFAULT CONFIG ~

>lua
    {
      commit_message = {
        language = "English"
      },
      provider = "openai",
      providers = {
        anthropic = {
          model = "claude-3-7-sonnet-20250219"
        },
        openai = {
          model = "gpt-4o"
        },
        openrouter = {
          model = "anthropic/claude-3.7-sonnet"
        }
      }
    }
<


API                                                   *senpai-senpai.nvim-api*

senpai.generate_commit_message(language) ~

AI generate conventional commit message of commitizen convention format.

  Name       Type     Description
  ---------- -------- ----------------------------
  language   string   Language of commit message
 

senpai.setup(config) ~

Setup senpai

  Name     Type            Description
  -------- --------------- --------------
  config   senpai.Config   Setup senpai
 

senpai.toggle_chat() ~

Toggle chat.

_No arguments_  

senpai.write_commit_message(language) ~

AI write conventional commit message of commitizen convention format.

  Name       Type     Description
  ---------- -------- ----------------------------
  language   string   Language of commit message
 


COMMANDS                                         *senpai-senpai.nvim-commands*

`:Senpai {subcommand}`

commitMessage ~

detail -> |senpai.write_commit_message|

  Name       Description
  ---------- -------------
  language   language
 


TYPE                                                 *senpai-senpai.nvim-type*

*senpai.Config*

>lua
    ---@class senpai.Config
    ---@field provider? provider
    ---@field providers? table<string, senpai.Config.providers.Provider>
    ---   see |senpai-config-providers|
    ---@field commit_message? senpai.Config.commit_message
    ---   see |senpai-config-commit-message|
    ---
    ---@eval return require("senpai.config")._format_default()
<

*senpai.Config.commit_message*

>lua
    ---@class senpai.Config.commit_message
    ---@field language string|(fun(): string) Supports languages that AI knows
    ---   It doesn't have to be strictly natural language,
    ---   since the prompt is as follows
    ---   >typescript
    ---    `subject and body should be written in ${language}.`
    --- <
    ---   That means the AI can write it in a tsundere style as well.
    ---   Like this.
    ---     `:Senpai commitMessage English(Tsundere)`
<

*senpai.Config.providers.AnthropicProvider*

>lua
    ---@class senpai.Config.providers.AnthropicProvider
    ---@field model ("claude-3-7-sonnet-20250219" | "claude-3-5-sonnet-20241022")
<

*senpai.Config.providers.OpenAIProvider*

>lua
    ---@class senpai.Config.providers.OpenAIProvider
    ---@field model ("gpt-4o" | "gpt-4o-mini")
<

*senpai.Config.providers.OpenRouterProvider*

>lua
    ---@class senpai.Config.providers.OpenRouterProvider
    ---@field model string
    ---   You can get a list of models with the following command.
    ---   >sh
    ---   curl https://openrouter.ai/api/v1/models | jq '.data[].id'
    ---   # check specific model
    ---   curl https://openrouter.ai/api/v1/models | \
    ---     jq '.data[] | select(.id == "deepseek/deepseek-r1:free") | .'
    --- <
<

*senpai.Config.providers.Provider*

>lua
    ---@class senpai.Config.providers.Provider
    ---@field model string
<

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
