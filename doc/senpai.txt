*senpai.txt*            For NVIM v0.10.0            Last change: 2025 March 21

==============================================================================
Table of Contents                                   *senpai-table-of-contents*

1. senpai.nvim                                            |senpai-senpai.nvim|
2. Feature                                                    |senpai-feature|
  - Chat                                                 |senpai-feature-chat|
  - History                                           |senpai-feature-history|
3. Requirements                                          |senpai-requirements|
4. Installation                                          |senpai-installation|
5. config                                                      |senpai-config|
  - default config                              |senpai-config-default-config|
  - changing the chat keymap          |senpai-config-changing-the-chat-keymap|
6. API                                                            |senpai-api|
  - delete_thread                                   |senpai-api-delete_thread|
  - generate_commit_message               |senpai-api-generate_commit_message|
  - load_thread                                       |senpai-api-load_thread|
  - new_chat                                             |senpai-api-new_chat|
  - setup                                                   |senpai-api-setup|
  - toggle_chat                                       |senpai-api-toggle_chat|
  - write_commit_message                     |senpai-api-write_commit_message|
7. Commands                                                  |senpai-commands|
  - _hello                                            |senpai-commands-_hello|
  - _helloStream                                |senpai-commands-_hellostream|
  - commitMessage                              |senpai-commands-commitmessage|
  - loadThread                                    |senpai-commands-loadthread|
  - newChat                                          |senpai-commands-newchat|
  - toggleChat                                    |senpai-commands-togglechat|
8. Type                                                          |senpai-type|

==============================================================================
1. senpai.nvim                                            *senpai-senpai.nvim*

Senpai is super reliable Neovim AI plugin!


==============================================================================
2. Feature                                                    *senpai-feature*

- Chat
- History: You can continue the conversation
- Generate commit message


CHAT                                                     *senpai-feature-chat*

You can chat with AI.


CHAT HELP ~

You can open keymap help with `?`.

By default, send to AI with `<CR>`.


READ FILE ~

If you write the file name, it will automatically read it. If you write
`foo/bar/buz.txt` as `summarize buz.txt`, it will be recognized. (internally it
searches `**/buz.txt` for files under git control).

Right now it’s automatic, but eventually I’m going to make it controllable.


HISTORY                                               *senpai-feature-history*

Select a past thread and load it again as a chat. **You can continue the
conversation**. The selection UI supports the following methods.

- Native (vim.ui.select)
- snacks.nvim <https://github.com/folke/snacks.nvim> picker




DELETE THREAD FROM HISTORY ~

In case of snacks, switch to normal mode and enter `dd` to delete the specified
thread. You can also delete using the API `senpai.delete_thread(thread_id)`.


==============================================================================
3. Requirements                                          *senpai-requirements*

- Neovim
- curl
- Bun <https://bun.sh/>
    - Forgive me if the dependence is frustrating for you, but it’s easy to install.


==============================================================================
4. Installation                                          *senpai-installation*

with Lazy.nvim <https://github.com/folke/lazy.nvim>

>lua
    {
        "eetann/senpai.nvim", 
        opts = {config}
    }
<

with packer.nvim <https://github.com/wbthomason/packer.nvim>

>lua
    {
        "eetann/senpai.nvim", 
        opt = true,
        config = function()
            require("senpai").setup({config}) 
        end
    }
<

**Example of lazy.nvim lazy loading** It is useful to set `:Senpai toggleChat`!

>lua
    {
        "eetann/senpai.nvim", 
        keys = {
            { "<space>ss", "<Cmd>Senpai toggleChat<CR>" },
        },
        cmd = { "Senpai" },
        opts = {config}
    }
<


==============================================================================
5. config                                                      *senpai-config*


DEFAULT CONFIG                                  *senpai-config-default-config*

The default config are as follows.

>lua
    {
      chat = {
        common = {
          keymaps = {
            ["<C-c>"] = "abort",
            ["?"] = "help",
            gl = "load_thread",
            gx = "new_chat",
            q = "close"
          }
        },
        input_area = {
          keymaps = {
            ["<CR>"] = "submit"
          }
        },
        log_area = {
          keymaps = {}
        }
      },
      commit_message = {
        language = "English"
      },
      providers = {
        anthropic = {
          model_id = "claude-3-7-sonnet-20250219"
        },
        default = "openrouter",
        openai = {
          model_id = "gpt-4o"
        },
        openrouter = {
          model_id = "anthropic/claude-3.7-sonnet"
        }
      }
    }
<


CHANGING THE CHAT KEYMAP              *senpai-config-changing-the-chat-keymap*

Assign `false` if you want to delete the keymap.

>lua
    require("senpai").setup({
        chat = {
            input_area = {
                keymaps = {
                    ["<CR>"] = false,
                    ["<CR><CR>"] = "submit",
                },
            },
        },
    })
<


==============================================================================
6. API                                                            *senpai-api*


DELETE_THREAD                                       *senpai-api-delete_thread*

>lua
    senpai.delete_thread(thread_id)
<

Delete the specified thread.

  Name        Type     Description
  ----------- -------- -------------
  thread_id   string   thread_id
 


GENERATE_COMMIT_MESSAGE                   *senpai-api-generate_commit_message*

>lua
    senpai.generate_commit_message(language)
<

AI generate conventional commit message of commitizen convention format.

  ---------------------------------------------------------------------------------------
  Name              Type                             Description
  ----------------- -------------------------------- ------------------------------------
  language          string                           Language of commit message

  callback          senpai.RequestHandler.callback   Function to be processed using the
                                                     response
  ---------------------------------------------------------------------------------------
 


LOAD_THREAD                                           *senpai-api-load_thread*

>lua
    senpai.load_thread()
<

detail -> |senpai-feature-history|

_No arguments_  


NEW_CHAT                                                 *senpai-api-new_chat*

>lua
    senpai.new_chat()
<

Open new chat.

_No arguments_  


SETUP                                                       *senpai-api-setup*

>lua
    senpai.setup({...})
<

Setup senpai

  Name     Type                Description
  -------- ------------------- --------------
  config   \|senpai.Config\|   Setup senpai
 


TOGGLE_CHAT                                           *senpai-api-toggle_chat*

>lua
    senpai.toggle_chat()
<

Toggle chat.

_No arguments_  


WRITE_COMMIT_MESSAGE                         *senpai-api-write_commit_message*

>lua
    senpai.write_commit_message(language)
<

AI write conventional commit message of commitizen convention format.

  Name       Type     Description
  ---------- -------- ----------------------------
  language   string   Language of commit message
 


==============================================================================
7. Commands                                                  *senpai-commands*

`:Senpai {subcommand}`


_HELLO                                                *senpai-commands-_hello*

>
    :Senapi _hello
<

For developers. To check communication with internal servers.

_No arguments_  


_HELLOSTREAM                                    *senpai-commands-_hellostream*

>
    :Senapi _helloStream
<

For developers. To check that streams are received correctly from the internal
server.

_No arguments_  


COMMITMESSAGE                                  *senpai-commands-commitmessage*

>
    :Senapi commitMessage
<

detail -> |senpai-api-write_commit_message|

  Name       Description
  ---------- -------------
  language   language
 


LOADTHREAD                                        *senpai-commands-loadthread*

>
    :Senapi loadThread
<

detail -> |senpai-feature-history|

_No arguments_  


NEWCHAT                                              *senpai-commands-newchat*

>
    :Senapi newChat
<

detail -> |senpai-api-new_chat|

_No arguments_  


TOGGLECHAT                                        *senpai-commands-togglechat*

>
    :Senapi toggleChat
<

detail -> |senpai-feature-chat|

_No arguments_  


==============================================================================
8. Type                                                          *senpai-type*

`*senpai.Config*`

>lua
    ---@class senpai.Config
    ---@field providers? senpai.Config.providers
    ---@field commit_message? senpai.Config.commit_message
    ---@field chat? senpai.Config.chat
<

`*senpai.Config.chat*`

>lua
    ---@class senpai.Config.chat
    ---@field common? senpai.Config.chat.common
    ---@field log_area? senpai.Config.chat.log_area
    ---@field input_area? senpai.Config.chat.input_area
<

`*senpai.Config.chat.common*`

>lua
    ---@class senpai.Config.chat.common
    ---@field keymaps? senpai.Config.chat.keymaps
<

`*senpai.Config.chat.input_area*`

>lua
    ---@class senpai.Config.chat.input_area
    ---@field keymaps? senpai.Config.chat.keymaps
<

`*senpai.Config.chat.keymap*`

>lua
    ---@class senpai.Config.chat.keymap
    ---@field [1]? string|fun(self: senpai.ChatWindow.Config):nil
    ---@field key? string
    ---@field mode? string|string[]
    ---@field desc string
<

`*senpai.Config.chat.log_area*`

>lua
    ---@class senpai.Config.chat.log_area
    ---@field keymaps? senpai.Config.chat.keymaps
<

`*senpai.Config.commit_message*`

>lua
    ---@class senpai.Config.commit_message
    ---@field language string|(fun(): string) Supports languages that AI knows
    ---   It doesn't have to be strictly natural language,
    ---   since the prompt is as follows
    ---    `subject and body should be written in ${language}.`
    ---   That means the AI can write it in a tsundere style as well.
    ---   Like this.
    ---     `:Senpai commitMessage English(Tsundere)`
<

`*senpai.Config.provider.anthropic*`

>lua
    ---@class senpai.Config.provider.anthropic: senpai.Config.provider.base
    ---@field model_id ("claude-3-7-sonnet-20250219" | "claude-3-5-sonnet-20241022"|string)
<

`*senpai.Config.provider.base*`

>lua
    ---@class senpai.Config.provider.base
    ---@field model_id string
<

`*senpai.Config.provider.openai*`

>lua
    ---@class senpai.Config.provider.openai: senpai.Config.provider.base
    ---@field model_id ("gpt-4o" | "gpt-4o-mini"|string)
<

`*senpai.Config.provider.openrouter*`

>lua
    ---@class senpai.Config.provider.openrouter: senpai.Config.provider.base
    ---@field model_id string
    ---   You can get a list of models with the following command.
    ---   >sh
    ---   curl https://openrouter.ai/api/v1/models | jq '.data[].id'
    ---   # check specific model
    ---   curl https://openrouter.ai/api/v1/models | \
    ---     jq '.data[] | select(.id == "deepseek/deepseek-r1:free") | .'
    --- <
<

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
