*senpai.txt*            For NVIM v0.10.0            Last change: 2025 April 16

==============================================================================
Table of Contents                                   *senpai-table-of-contents*

1. senpai.nvim                                            |senpai-senpai.nvim|
2. Feature                                                    |senpai-feature|
  - Chat                                                 |senpai-feature-chat|
  - Chat Keymaps                                 |senpai-feature-chat-keymaps|
  - History                                           |senpai-feature-history|
  - MCP                                                   |senpai-feature-mcp|
  - RAG                                                   |senpai-feature-rag|
  - Project Rules                               |senpai-feature-project-rules|
  - Prompt Launcher                           |senpai-feature-prompt-launcher|
  - Generate commit message           |senpai-feature-generate-commit-message|
3. Requirements                                          |senpai-requirements|
4. Installation                                          |senpai-installation|
  - Provider                                    |senpai-installation-provider|
5. config                                                      |senpai-config|
  - default config                              |senpai-config-default-config|
  - transfer keymap                            |senpai-config-transfer-keymap|
  - with render-markdown.nvim        |senpai-config-with-render-markdown.nvim|
  - with status plugin                      |senpai-config-with-status-plugin|
6. API                                                            |senpai-api|
  - delete_rag_source                           |senpai-api-delete_rag_source|
  - delete_thread                                   |senpai-api-delete_thread|
  - generate_commit_message               |senpai-api-generate_commit_message|
  - load_thread                                       |senpai-api-load_thread|
  - new_thread                                         |senpai-api-new_thread|
  - prompt_launcher                               |senpai-api-prompt_launcher|
  - regist_url_at_rag                           |senpai-api-regist_url_at_rag|
  - setup                                                   |senpai-api-setup|
  - toggle_chat                                       |senpai-api-toggle_chat|
  - transfer_visual_to_chat               |senpai-api-transfer_visual_to_chat|
  - write_commit_message                     |senpai-api-write_commit_message|
7. Commands                                                  |senpai-commands|
  - _hello                                            |senpai-commands-_hello|
  - _helloStream                                |senpai-commands-_hellostream|
  - commitMessage                              |senpai-commands-commitmessage|
  - deleteRagSource                          |senpai-commands-deleteragsource|
  - loadThread                                    |senpai-commands-loadthread|
  - newThread                                      |senpai-commands-newthread|
  - promptLauncher                            |senpai-commands-promptlauncher|
  - toggleChat                                    |senpai-commands-togglechat|
  - transferToChat                            |senpai-commands-transfertochat|
8. Type                                                          |senpai-type|
9. Acknowledgements                                  |senpai-acknowledgements|

==============================================================================
1. senpai.nvim                                            *senpai-senpai.nvim*

Senpai is super reliable Neovim AI plugin!


==============================================================================
2. Feature                                                    *senpai-feature*

- Chat
- History: You can continue the conversation
- MCP (Model Context Protocol)
- RAG (Retrieval Augmented Generation)
- Setting Project Rules
- Prompt Launcher: Open chat with pre-defined prompts
- Generate commit message

Powered by Mastra <https://mastra.ai/> and Vercel AI SDK
<https://sdk.vercel.ai/>.


CHAT                                                     *senpai-feature-chat*

You can chat with AI. Youcan toggle the chat window with `:Senpai toggleChat`.


CHAT HELP ~

**You can open keymap help with ?**.

By default, send to AI with `<CR>`.


READ FILE ~

There are two ways to load files: "Link format" and "Automatic".


LINK FORMAT

Entering `/file` will open the finder and allow you to preview and select the
file you wish to attach. The currently supported plugins are as follows

- completion plugin
    - blink.cmp <https://github.com/Saghen/blink.cmp>
- finder
    - snacks.nvim <https://github.com/folke/snacks.nvim> picker

Links can be inserted manually without a plugin.

>txt
    Explain [foo.txt](/workspace/foo.txt)
<

File paths can be absolute or relative, such as starting with `./`.


AUTOMATIC

If you write the file name without mention, it will automatically read it. If
you write `foo/bar/buz.txt` as `summarize buz.txt`, it will be recognized.
(internally it searches `**/buz.txt` for files under git control).

**This one does not apply the per-file rules of the project** (explained
later).


REPLACE FILE ~

You can also edit the file.

In the area called `Replace File`, press `a` to display the diff. This diff
uses Neovim’s built-in function `diffthis`, so you can apply the diff with
`do` or `dp`. Related help `:help copy-diffs`.


SYSTEMPROMPT ~

If you want to write a system prompt, you can configure it as follows.

>lua
    require("senpai").setup({
        chat = {
            system_prompt = "Answers should be in Japanese."
        }
    })
<

To see the system prompt, type `gs` in the chat log area (Key is customizable).


CHAT KEYMAPS                                     *senpai-feature-chat-keymaps*

You can set up a keymap for Chat with the following three.

- `chat.common.keymaps`common in log area and input area
- `chat.log_area.keymaps`for log area
- `chat.input_area.keymaps`for input area

>lua
    require("senpai").setup({
        chat = {
            input_area = {
                keymaps = {
                    ["gT"] = "load_thread",
                    ["<CR><CR>"] = "submit",
                    ["<CR>"] = false,
                },
            },
        },
    })
<

Assign `false` if you want to delete the keymap.

All actions can be performed from Help(`?`).

The names of the actions that can be written in the keymaps table are.

- `abort`
    - Abort the current interaction with the LLM
    - default: `<C-c>`
- `apply`
    - Apply the contents of the `Replace File` block to a file
    - default: `a` in log area
- `close`
    - close chat
    - default: `q`
- `foo`
    - Toggle display of input area
    - default: `gi`
- `help`
    - show chat’s keymap help
    - default: `?`
- `load_thread`
    - load thread. detail -> |senpai-feature-history|
    - default: `gl`
- `new_thread`
    - replace new thread. detail -> |senpai-api-new_thread|
    - default: `gx`
- `open_api_doc`
    - _For Developers._ Open internal API docs. You can call the API immediately!
    - default: none
- `regist_url_at_rag`
    - Fetch URL and save to RAG
    - default: `gR` in input area
- `show_internal_log`
    - _For Developers._ show internal API log
    - default: none
- `show_mcp_tools`
    - _For Developers._ show MCP Tools
    - default: none
- `show_replace_content`
    - _For Developers._ show Replace File content.
    - default: none
- `show_system_prompt`
    - Show system prompt associated with current chat
    - default: `gs` in log area
- `submit`
    - Send the text in the input area to the LLM
    - default: `<CR>` in input area


HISTORY                                               *senpai-feature-history*

Select a past thread and load it again as a chat. **You can continue the
conversation**. `:Senpai loadThread` opens the chat list. Theselection UI
supports the following methods.

- Native (vim.ui.select)
- snacks.nvim <https://github.com/folke/snacks.nvim> picker




DELETE THREAD FROM HISTORY ~

In case of snacks, switch to normal mode and enter `dd` to delete the specified
thread. You can also delete using the API `senpai.delete_thread(thread_id)`.


MCP                                                       *senpai-feature-mcp*

MCP(Model Context Protocol) is avaiable. The AI will think of the MCP tool
calls in the chat on its own.

MCP configuration can be written in two places.

- `require("senpai").setup`write configuration common to all projects in Lua
- `.senpai/mcp.json`Project-specific configuration in json


CONFIGURATION IN PLUGIN SETUP ~

You can set up servers in `mcp.servers` like this:

>lua
    require("senpai").setup({
        mcp = {
            servers = {
                sequential = {
                    command = "bunx",
                    args = { "-y", "@modelcontextprotocol/server-sequential-thinking" },
                },
            },
        },
    }) 
<

You can find detailed writing instructions in the type list
|`senpai.Config.mcp`|.


CONFIGURATION IN PROJECT ~

You can set up servers in `.senpai/mcp.json` like this:

>json
    {
        "mcpServers": {
            "mastra": {
                "command": "bunx",
                "args": ["-y", "@mastra/mcp-docs-server"]
            },
            "daisyUi": {
                "command": "bunx",
                "args": ["-y", "sitemcp", "https://daisyui.com", "-m", "/components/**"]
            }
        }
    }
<


RAG                                                       *senpai-feature-rag*

RAG(Retrieval-Augmented Generation) is avaiable. If you want to use RAG, please
make a mention like `@rag`.

>txt
    @rag Tell me about mdx.
<

If you are not comfortable with mentions, set `rag.mode` to `“auto”` in the
settings, and the AI will determine when to use it on its own. But you have to
understand that AI often does RAG searches for nothing.

Supported types:

- URL

URL can be registered with RAG in two ways.

- default keymap `gR` in Chat input area (Key is customizable)
- API `senpai.regist_url_at_rag`

Unnecessary items can be deleted.



Cache control can be configured in |`senpai.Config.rag.cache_strategy`|.


PROJECT RULES                                   *senpai-feature-project-rules*

Rules can be set for each project.

The rule prompts are the `./senpai/prompts/` directory as mdx files.

>
    ./senpai/prompts/
    ├── project.mdx
    ├── inquiry.mdx
    └── calendar.mdx
<

Write the following.

>markdown
    ---
    description: "Front-end side of senpai.nvim"
    globs: "lua/senpai/**/*.lua"
    ---
    
    First, when you refer to this sentence, greet it with "I love Neovim!"
    
    You are a professional Neovim plugin developer and are familiar with Lua.
<

The following elements can be written in the frontmatter.

- description: `string`. description for human
- (optional)globs: `string|string[]|undefined`.
    - Write the glob of the file to which you want to apply the prompt for that file
    - See Supported Glob Patterns(Bun Docs) <https://bun.sh/docs/api/glob#supported-glob-patterns> for how to write supported globs


PROMPT LAUNCHER                               *senpai-feature-prompt-launcher*

You can chat with customized prompts.

>lua
    require("senpai").setup({
      prompt_launchers = {
        ["Tsundere"] = {
          system = "Answers should be tsundere style.",
          priority = 100,
        },
        ["test message"] = {
          user = "test message. Hello!",
        },
      },
    }) 
<

Command `:Senpai promptLauncher` opens the selection UI. The chosen one opens
as a chat.


GENERATE COMMIT MESSAGE               *senpai-feature-generate-commit-message*

You can generate a conventional commit message with the following command in
`.git/COMMIT_EDITMSG`.

>
    :Senpai commitMessage
    :Senpai commitMessage Japanese
<

Language names need not be exact. They are free. For example, you can use
something like this. :)

>
    :Senpai commitMessage English(Tsundere)
<

Here’s a code of my setup in `.config/nvim/after/ftplugin/gitcommit.lua`.

>lua
    vim.keymap.set("n", "<C-g><C-g>", function()
        if vim.env.COMMIT_MESSAGE_ENGLISH == "1" then
            vim.cmd("Senpai commitMessage English")
        else
            vim.cmd("Senpai commitMessage Japanese")
        end
    end, { buffer = true, desc = "Senpai commitMessage" })
<


==============================================================================
3. Requirements                                          *senpai-requirements*

- Neovim
- curl
- Bun <https://bun.sh/>
    - Forgive me if the dependence is frustrating for you, but it’s easy to install.
- Dependent Plugins
    - nui.nvim <https://github.com/MunifTanjim/nui.nvim>
    - plenary.nvim <https://github.com/nvim-lua/plenary.nvim>
    - nvim-treesitter <https://github.com/nvim-treesitter/nvim-treesitter>


==============================================================================
4. Installation                                          *senpai-installation*

with Lazy.nvim <https://github.com/folke/lazy.nvim>

>lua
    {
        "eetann/senpai.nvim", 
        build = "bun install",
        dependencies = {
          "MunifTanjim/nui.nvim",
          "nvim-lua/plenary.nvim",
          "nvim-treesitter/nvim-treesitter",
        },
        opts = {}
    }
<

with packer.nvim <https://github.com/wbthomason/packer.nvim>

>lua
    {
        "eetann/senpai.nvim", 
        run = "bun install",
        requires = {
          "MunifTanjim/nui.nvim",
          "nvim-lua/plenary.nvim",
          "nvim-treesitter/nvim-treesitter",
        },
        opt = true,
        config = function()
            require("senpai").setup({}) 
        end
    }
<

**Example of lazy.nvim lazy loading** It is useful to set `:Senpai toggleChat`!

>lua
    {
        "eetann/senpai.nvim", 
        keys = {
            { "<space>ss", "<Cmd>Senpai toggleChat<CR>" },
            { "<space>sl", "<Cmd>Senpai promptLauncher<CR>" },
            { "<space>sv", "<Cmd>Senpai transferToChat<CR>", mode = "v" },
        },
        cmd = { "Senpai" },
        opts = {config}
    }
<


PROVIDER                                        *senpai-installation-provider*

Currently supported providers are as follows.

  name         Environment variable for API token
  ------------ ------------------------------------
  anthropic    ANTHROPIC_API_KEY
  deepseek     DEEPSEEK_API_KEY
  google       GOOGLE_GENERATIVE_AI_API_KEY
  openai       OPENAI_API_KEY
  openrouter   OPENROUTER_API_KEY
The default provider is written in `providers.default`.

>lua
    require("senpai").setup({
      providers = {
        default = "openrouter",
      },
    })
<

The model specifications should be written in the `model_id` of each provider.

>lua
    require("senpai").setup({
      providers = {
        default = "openrouter",
        openrouter = { model_id = "openai/chatgpt-4o-latest" },
      },
    })
<

You can find how to write `model_id` in the following links (most of them are
in the Vercel AI SDK documentation).

- Anthropic <https://sdk.vercel.ai/providers/ai-sdk-providers/anthropic#model-capabilities>
- DeepSeek <https://sdk.vercel.ai/providers/ai-sdk-providers/deepseek#model-capabilities>
- Google <https://sdk.vercel.ai/providers/ai-sdk-providers/google-generative-ai#model-capabilities>
- OpenAI <https://sdk.vercel.ai/providers/ai-sdk-providers/openai#model-capabilities>
- …
- OpenRouter <https://openrouter.ai/models>


==============================================================================
5. config                                                      *senpai-config*


DEFAULT CONFIG                                  *senpai-config-default-config*

The default config are as follows.

>lua
    {
      chat = {
        common = {
          keymaps = {
            ["<C-c>"] = "abort",
            ["?"] = "help",
            gi = "toggle_input",
            gl = "load_thread",
            gx = "new_thread",
            q = "close"
          },
          width = 80
        },
        input_area = {
          height = "25%",
          keep_file_attachment = true,
          keymaps = {
            ["<CR>"] = "submit",
            gR = "regist_url_at_rag"
          }
        },
        log_area = {
          keymaps = {
            a = "apply",
            gs = "show_system_prompt"
          }
        }
      },
      commit_message = {
        language = "English"
      },
      debug = false,
      mcp = {
        servers = {}
      },
      prompt_launchers = {
        Senpai = {
          priority = 99,
          system = "Answer as a senpai with a crazy casual tone."
        },
        Tsundere = {
          priority = 100,
          system = "Answers should be tsundere style."
        }
      },
      providers = {
        anthropic = {
          model_id = "claude-3-7-sonnet-20250219"
        },
        deepseek = {
          model_id = "deepseek-chat"
        },
        default = "openrouter",
        google = {
          model_id = "gemini-1.5-pro"
        },
        openai = {
          model_id = "gpt-4.1-mini"
        },
        openrouter = {
          model_id = "anthropic/claude-3.7-sonnet"
        }
      },
      rag = {
        cache_strategy = "ask",
        mode = "mention"
      }
    }
<


TRANSFER KEYMAP                                *senpai-config-transfer-keymap*

You can transfer the selection to the chat input area by setting up a keymap as
follows.

>lua
    vim.keymap.set("v", "<space>sv", 
        function()
            require("senpai.api").transfer_visual_to_chat()
        end,
        { desc = "[senpai] transfer_visual_to_chat" }
    )
<

For lazy.nvim, it is convenient to write in `keys`.

>lua
    {
        "eetann/senpai.nvim", 
        keys = {
            -- ...
            {
                "<space>sv",
                function()
                    require("senpai.api").transfer_visual_to_chat()
                end,
                mode = "v",
                desc = "[senpai] transfer_visual_to_chat",
            },
        },
    }
<


WITH RENDER-MARKDOWN.NVIM            *senpai-config-with-render-markdown.nvim*

If you are using a plugin that renders markdown like render-markdown.nvim
<https://github.com/MeanderingProgrammer/render-markdown.nvim>, it would be
useful to add the following file type specification.

>lua
    return {
        "MeanderingProgrammer/render-markdown.nvim",
        ft = { "markdown", "mdx", "senpai_chat_log", "senpai_chat_input" },
        -- ...
    }
<


WITH STATUS PLUGIN                          *senpai-config-with-status-plugin*

If you have a status plugin or winbar set up, I recommend that you do not set
it up in the senpai.nvim buffer.

For example, for lualine.nvim <https://github.com/nvim-lualine/lualine.nvim>,
you could set the following

>lua
    require("lualine").setup({
        options = {
            disabled_filetypes = {
                winbar = {
                    "senpai_chat_log",
                    "senpai_chat_input",
                },
            },
        },
    })
<


==============================================================================
6. API                                                            *senpai-api*

For simplicity, this document uses the following definition:

>lua
    local senpai = require("senpai.api")
<


DELETE_RAG_SOURCE                               *senpai-api-delete_rag_source*

>lua
    senpai.delete_rag_source()
    senpai.delete_rag_source(source)
<

detail -> |senpai-feature-rag|

  Name     Type      Description
  -------- --------- ----------------------------------------
  source   string?   If not specified, the finder will open
 


DELETE_THREAD                                       *senpai-api-delete_thread*

>lua
    senpai.delete_thread(thread_id)
<

Delete the specified thread.

  Name        Type     Description
  ----------- -------- -------------
  thread_id   string   thread_id
 


GENERATE_COMMIT_MESSAGE                   *senpai-api-generate_commit_message*

>lua
    senpai.generate_commit_message(language)
<

AI generate conventional commit message of commitizen convention format.

  ---------------------------------------------------------------------------------------
  Name              Type                             Description
  ----------------- -------------------------------- ------------------------------------
  language          string                           Language of commit message

  callback          senpai.RequestHandler.callback   Function to be processed using the
                                                     response
  ---------------------------------------------------------------------------------------
 


LOAD_THREAD                                           *senpai-api-load_thread*

>lua
    senpai.load_thread()
    senpai.load_thread(thread)
<

detail -> |senpai-feature-history|

  Name        Type      Description
  ----------- --------- ----------------------------------------
  thread_id   string?   If not specified, the finder will open
 


NEW_THREAD                                             *senpai-api-new_thread*

>lua
    senpai.new_thread()
<

Open new chat.

_No arguments_  


PROMPT_LAUNCHER                                   *senpai-api-prompt_launcher*

>lua
    senpai.prompt_launcher()
<

Select and launch the prompt_launcher set in |senpai.Config.prompt_launchers|.

_No arguments_  


REGIST_URL_AT_RAG                               *senpai-api-regist_url_at_rag*

>lua
    senpai.regist_url_at_rag()
    senpai.regist_url_at_rag(url)
<

Fetch URL and save to RAG. Cache control can be configured in
|senpai.Config.rag.cache_strategy|.

  ------------------------------------------------------------------------
  Name              Type              Description
  ----------------- ----------------- ------------------------------------
  url               string|nil        URL. If not specified, the input UI
                                      will open

  no_cache          boolean|nil       If set to true, no cache is used
                                      regardless of Config.
  ------------------------------------------------------------------------
 


SETUP                                                       *senpai-api-setup*

>lua
    senpai.setup({...})
<

Setup senpai

  Name     Type              Description
  -------- ----------------- --------------
  config   |senpai.Config|   Setup senpai
 


TOGGLE_CHAT                                           *senpai-api-toggle_chat*

>lua
    senpai.toggle_chat()
<

Toggle chat.

_No arguments_  


TRANSFER_VISUAL_TO_CHAT                   *senpai-api-transfer_visual_to_chat*

>lua
    senpai.transfer_visual_to_chat()
<

Transfers the selected range in visual mode to the chat input area. If the chat
buffer is not open, it will be opened.

_No arguments_  


WRITE_COMMIT_MESSAGE                         *senpai-api-write_commit_message*

>lua
    senpai.write_commit_message(language)
<

AI write conventional commit message of commitizen convention format.

  Name       Type     Description
  ---------- -------- ----------------------------
  language   string   Language of commit message
 


==============================================================================
7. Commands                                                  *senpai-commands*

`:Senpai {subcommand}`


_HELLO                                                *senpai-commands-_hello*

>
    :Senpai _hello
<

For developers. To check communication with internal servers.

_No arguments_  


_HELLOSTREAM                                    *senpai-commands-_hellostream*

>
    :Senpai _helloStream
<

For developers. To check that streams are received correctly from the internal
server.

_No arguments_  


COMMITMESSAGE                                  *senpai-commands-commitmessage*

>
    :Senpai commitMessage
<

detail -> |senpai-api-write_commit_message|

  Name       Description
  ---------- -------------
  language   language
 


DELETERAGSOURCE                              *senpai-commands-deleteragsource*

>
    :Senpai deleteRagSource
<

detail -> |senpai-feature-rag|

_No arguments_  


LOADTHREAD                                        *senpai-commands-loadthread*

>
    :Senpai loadThread
<

detail -> |senpai-feature-history|

_No arguments_  


NEWTHREAD                                          *senpai-commands-newthread*

>
    :Senpai newThread
<

detail -> |senpai-api-new_thread|

_No arguments_  


PROMPTLAUNCHER                                *senpai-commands-promptlauncher*

>
    :Senpai promptLauncher
<

detail -> |senpai-api-prompt_launcher|

_No arguments_  


TOGGLECHAT                                        *senpai-commands-togglechat*

>
    :Senpai toggleChat
<

detail -> |senpai-feature-chat|

_No arguments_  


TRANSFERTOCHAT                                *senpai-commands-transfertochat*

>
    :Senpai transferToChat
<

detail -> |senpai-api-transfer_visual_to_chat|

_No arguments_  


==============================================================================
8. Type                                                          *senpai-type*

`*senpai.Config*`

>lua
    ---@class senpai.Config
    ---@field providers? senpai.Config.providers
    ---@field commit_message? senpai.Config.commit_message
    ---@field chat? senpai.Config.chat
    ---@field rag? senpai.Config.rag
    ---@field prompt_launchers? senpai.Config.prompt_launchers
    ---@field mcp? senpai.Config.mcp
    ---@field debug? boolean
<

`*senpai.Config.chat*`

>lua
    ---@class senpai.Config.chat
    ---@field common? senpai.Config.chat.common
    ---@field log_area? senpai.Config.chat.log_area
    ---@field input_area? senpai.Config.chat.input_area
    ---@field system_prompt? string
<

`*senpai.Config.chat.action*`

>lua
    ---@alias senpai.Config.chat.action
    ---|false
    ---|senpai.Config.chat.actions # detail -> |senpai-feature-chat-keymaps|
    ---|senpai.Config.chat.keymap
<

`*senpai.Config.chat.common*`

>lua
    ---@class senpai.Config.chat.common
    ---@field keymaps? senpai.Config.chat.keymaps
    ---@field width? number|string column number or width percentage string for chat window
    ---  width = 50 -- 50 column number
    ---  width = 40% -- 40% chat window width relative to editor
<

`*senpai.Config.chat.input_area*`

>lua
    ---@class senpai.Config.chat.input_area
    ---@field keymaps? senpai.Config.chat.keymaps
    ---@field height? number|string row number or height percentage string for input area
    ---  height = 5 -- 5 row number
    ---  height = 25% -- 25% input area height relative to chat window
    ---@field keep_file_attachment? boolean
    --- If set to true, files are automatically attached in the next message when attached.
<

`*senpai.Config.chat.keymap*`

>lua
    ---@class senpai.Config.chat.keymap
    ---@field [1]? string|fun(self: senpai.IChatWindow):nil
    ---@field key? string
    ---@field mode? string|string[]
    ---@field desc string
<

`*senpai.Config.chat.keymaps table<string, senpai.Config.chat.action>*`

>lua
    ---@alias senpai.Config.chat.keymaps table<string, senpai.Config.chat.action>
<

`*senpai.Config.chat.log_area*`

>lua
    ---@class senpai.Config.chat.log_area
    ---@field keymaps? senpai.Config.chat.keymaps
<

`*senpai.Config.commit_message*`

>lua
    ---@class senpai.Config.commit_message
    ---@field language string|(fun(): string) Supports languages that AI knows
    ---   It doesn't have to be strictly natural language,
    ---   since the prompt is as follows
    ---    `subject and body should be written in ${language}.`
    ---   That means the AI can write it in a tsundere style as well.
    ---   Like this.
    ---     `:Senpai commitMessage English(Tsundere)`
<

`*senpai.Config.mcp*`

>lua
    ---@class senpai.Config.mcp
    ---@field servers? table<string, senpai.Config.mcp.server>
    --- server name is as follows: `[0-9a-zA-Z-_]`
    --- OK: `mastraDocs`
    --- NG: `mastra docs`
<

`*senpai.Config.mcp.server*`

>lua
    ---@alias senpai.Config.mcp.server
    ---| senpai.Config.mcp.server.stdio
    ---| senpai.Config.mcp.server.sse
<

`*senpai.Config.mcp.server.sse*`

>lua
    ---@class senpai.Config.mcp.server.sse
    ---@field url string
<

`*senpai.Config.mcp.server.stdio*`

>lua
    ---@class senpai.Config.mcp.server.stdio
    ---@field command string
    ---@field args? string[]
    ---@field env? table<string, string>
    ---@field cwd? string
<

`*senpai.Config.provider.anthropic*`

>lua
    ---@class senpai.Config.provider.anthropic: senpai.Config.provider.base
    ---@field model_id ("claude-3-7-sonnet-20250219"|"claude-3-5-sonnet-20241022"|string)
<

`*senpai.Config.provider.base*`

>lua
    ---@class senpai.Config.provider.base
    ---@field model_id string
<

`*senpai.Config.provider.deepseek*`

>lua
    ---@class senpai.Config.provider.deepseek: senpai.Config.provider.base
    ---@field model_id ("deepseek-chat"|"deepseek-reasoner"|string)
    --- deepseek-reasoner is DeepSeek-R1. Since structured output is not possible,
    --- commit message generation cannot be used with deepseek-reasoner.
<

`*senpai.Config.provider.google*`

>lua
    ---@class senpai.Config.provider.google: senpai.Config.provider.base
    ---@field model_id ("gemini-2.5-pro-exp-03-25"|"gemini-2.0-flash-001"|string)
<

`*senpai.Config.provider.name*`

>lua
    ---@alias senpai.Config.provider.name
    ---| "anthropic"
    ---| "deepseek"
    ---| "google"
    ---| "openai"
    ---| "openrouter"
<

`*senpai.Config.provider.openai*`

>lua
    ---@class senpai.Config.provider.openai: senpai.Config.provider.base
    ---@field model_id ("gpt-4.1"|"gpt-4.1-mini"|"gpt-4o"|"gpt-4o-mini"|string)
<

`*senpai.Config.provider.openrouter*`

>lua
    ---@class senpai.Config.provider.openrouter: senpai.Config.provider.base
    ---@field model_id ("openai/gpt-4.1"|string)
    ---   You can get a list of models with the following command.
    ---   >sh
    ---   curl https://openrouter.ai/api/v1/models | jq '.data[].id'
    ---   # check specific model
    ---   curl https://openrouter.ai/api/v1/models | \
    ---     jq '.data[] | select(.id == "deepseek/deepseek-r1:free") | .'
    --- <
<

`*senpai.Config.provider.settings*`

>lua
    ---@class senpai.Config.provider.settings
    ---@field anthropic? senpai.Config.provider.anthropic
    ---@field deepseek? senpai.Config.provider.deepseek
    ---@field google? senpai.Config.provider.google
    ---@field openai? senpai.Config.provider.openai
    ---@field openrouter? senpai.Config.provider.openrouter
    ---@field [string] senpai.Config.provider.base
<

`*senpai.Config.providers*`

>lua
    ---@class senpai.Config.providers: senpai.Config.provider.settings
    ---@field default senpai.Config.provider.name|string
<

`*senpai.Config.rag*`

>lua
    ---@class senpai.Config.rag
    ---@field cache_strategy? senpai.Config.rag.cache_strategy
    ---@field mode? "mention"|"auto"
<

`*senpai.Config.rag.cache_strategy*`

>lua
    ---@alias senpai.Config.rag.cache_strategy
    ---| "use_cache"
    ---| "no_cache"
    ---| "ask"
<


==============================================================================
9. Acknowledgements                                  *senpai-acknowledgements*

This plugin was inspired by the following.

- codecompanion.nvim <https://github.com/olimorris/codecompanion.nvim>Default keymaps and Implementation of diff display
- avante.nvim <https://github.com/yetone/avante.nvim>Use of winbar and virt text in chat windows
- nvim-deck <https://github.com/hrsh7th/nvim-deck>Scripts for creating README and Help
- cline <https://github.com/cline/cline>How to prompt and edit files

Thanks to all those involved in these!

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
